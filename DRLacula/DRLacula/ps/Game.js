// Generated by psc-bundle 0.8.2.0
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var $foreign = PS["Prelude"];
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };                                                                           
  var unit = {};      
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (dictApplicative) {
      return pure(dictApplicative);
  };
  var map = function (dict) {
      return dict.map;
  };
  var bind = function (dict) {
      return dict.bind;
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (dictApply) {
      return apply(dictApply);
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $less$greater = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
                  return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
                      return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["return"] = $$return;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["apply"] = apply;
  exports["map"] = map;
  exports["unit"] = unit;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Char

  exports.toString = function (c) {
    return c;
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
 
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var $foreign = PS["Data.Char"];
  var Prelude = PS["Prelude"];
  exports["fromCharCode"] = $foreign.fromCharCode;
  exports["toString"] = $foreign.toString;;
 
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var Prelude = PS["Prelude"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Cons.create)(Nil.value);
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["fromFoldable"] = fromFoldable;;
 
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Char = PS["Data.Char"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var fromChar = Data_Char.toString;
  exports["fromChar"] = fromChar;;
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var white = {
      r: 255, 
      g: 255, 
      b: 255
  };
  exports["white"] = white;;
 
})(PS["Engine.Color"] = PS["Engine.Color"] || {});
(function(exports) {
  "use strict";

  // module Engine.Graphics

  exports.drawStringEx = function(str) {
      return function (x) {
          return function (y) {
              return function (col) {
                  return function (center) {
                      return function () {
                          Game.Instance.Graphics.DrawString(str, x, y, col.r, col.g, col.b, center);
                          return {};
                      };
                  };
              };
          };
      };
  };

  exports.drawWindow = function(x) {
      return function (y) {
          return function (width) {
              return function (height) {
                  return function (col) {
                      return function (fill) {
                          return function () {
                              Game.Instance.Graphics.DrawWindow(x, y, width, height, col.r, col.g, col.b, fill);
                              return {};
                          };
                      };
                  };
              };
          };
      };
  };
})(PS["Engine.Graphics"] = PS["Engine.Graphics"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var $foreign = PS["Engine.Graphics"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Engine_Effects = PS["Engine.Effects"];
  var Engine_Color = PS["Engine.Color"];
  var drawString = function (s) {
      return function (x) {
          return function (y) {
              return function (col) {
                  return $foreign.drawStringEx(s)(x)(y)(col)(false);
              };
          };
      };
  };
  exports["drawString"] = drawString;
  exports["drawWindow"] = $foreign.drawWindow;;
 
})(PS["Engine.Graphics"] = PS["Engine.Graphics"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Engine_Graphics = PS["Engine.Graphics"];
  var Engine_Effects = PS["Engine.Effects"];
  var Engine_Color = PS["Engine.Color"];
  var Data_String = PS["Data.String"];
  var Data_Char = PS["Data.Char"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var $colon = Data_List.Cons.create;
  var onKeyPress = function (state) {
      return function (key) {
          return function (shift) {
              return state + 1 | 0;
          };
      };
  };
  var initialGameState = 5;
  var gameTitle = Data_List.fromFoldable(Data_Foldable.foldableArray)([ "      _ _____  _                      _", "     | |  __ \\| |                    | |", "   __| | |__) | |     __ _  ___ _   _| | __ _", "  / _` |  _  /| |    / _` |/ __| | | | |/ _` |", " | (_| | | \\ \\| |___| (_| | (__| |_| | | (_| |", "  \\__,_|_|  \\_\\______\\__,_|\\___|\\__,_|_|\\__,_|" ]);
  var drawMenu = function (x) {
      return function (y) {
          var drawer = function (v) {
              return function (v1) {
                  if (v instanceof Data_List.Cons) {
                      return function __do() {
                          Engine_Graphics.drawString(v.value0)(x)(v1)(Engine_Color.white)();
                          return drawer(v.value1)(v1 + 1 | 0)();
                      };
                  };
                  if (v instanceof Data_List.Nil) {
                      return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
                  };
                  throw new Error("Failed pattern match at Game line 32, column 1 - line 39, column 1: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return drawer(gameTitle)(y);
      };
  };
  var drawFunc = function (state) {
      return function __do() {
          Engine_Graphics.drawWindow(12)(1)(51)(9)(Engine_Color.white)(false)();
          drawMenu(14)(2)();
          Engine_Graphics.drawWindow(40 - 16)(12)(30)(9)(Engine_Color.white)(false)();
          return Engine_Graphics.drawString(Data_String.fromChar(Data_Char.fromCharCode(1)) + " Start new game")(40 - 14)(14)(Engine_Color.white)();
      };
  };
  exports["gameTitle"] = gameTitle;
  exports["drawMenu"] = drawMenu;
  exports["onKeyPress"] = onKeyPress;
  exports["drawFunc"] = drawFunc;
  exports["initialGameState"] = initialGameState;
  exports[":"] = $colon;;
 
})(PS["Game"] = PS["Game"] || {});

PS["Main"].main();
