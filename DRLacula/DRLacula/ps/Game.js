// Generated by psc-bundle 0.8.2.0
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var $foreign = PS["Prelude"];
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };                                                                           
  var unit = {};      
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (dictApplicative) {
      return pure(dictApplicative);
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (dictFunctor) {
      return map(dictFunctor);
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var $$void = function (dictFunctor) {
      return function (fa) {
          return $less$dollar$greater(dictFunctor)($$const(unit))(fa);
      };
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var $greater$greater$eq = function (dictBind) {
      return bind(dictBind);
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (dictApply) {
      return apply(dictApply);
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
                  return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
                      return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["ap"] = ap;
  exports["return"] = $$return;
  exports[">>="] = $greater$greater$eq;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["apply"] = apply;
  exports["void"] = $$void;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["const"] = $$const;
  exports["unit"] = unit;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var foldM = function (dictMonad) {
      return function (f) {
          return function (a) {
              return $foreign["uncons'"](function (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(a);
              })(function (b) {
                  return function (bs) {
                      return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(f(a)(b))(function (a$prime) {
                          return foldM(dictMonad)(f)(a$prime)(bs);
                      });
                  };
              });
          };
      };
  };
  exports["foldM"] = foldM;;
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Char

  exports.toString = function (c) {
    return c;
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
 
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var $foreign = PS["Data.Char"];
  var Prelude = PS["Prelude"];
  exports["fromCharCode"] = $foreign.fromCharCode;
  exports["toString"] = $foreign.toString;;
 
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Char = PS["Data.Char"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var fromChar = Data_Char.toString;
  exports["fromChar"] = fromChar;;
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var white = {
      r: 255, 
      g: 255, 
      b: 255
  };
  exports["white"] = white;;
 
})(PS["Engine.Color"] = PS["Engine.Color"] || {});
(function(exports) {
  "use strict";

  // module Engine.Graphics

  exports.drawStringEx = function(str) {
      return function (x) {
          return function (y) {
              return function (col) {
                  return function (center) {
                      return function () {
                          Game.Instance.Graphics.DrawString(str, x, y, col.r, col.g, col.b, center);
                          return {};
                      };
                  };
              };
          };
      };
  };

  exports.drawWindow = function(x) {
      return function (y) {
          return function (width) {
              return function (height) {
                  return function (col) {
                      return function (fill) {
                          return function () {
                              Game.Instance.Graphics.DrawWindow(x, y, width, height, col.r, col.g, col.b, fill);
                              return {};
                          };
                      };
                  };
              };
          };
      };
  };
})(PS["Engine.Graphics"] = PS["Engine.Graphics"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var $foreign = PS["Engine.Graphics"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Engine_Effects = PS["Engine.Effects"];
  var Engine_Color = PS["Engine.Color"];
  var drawString = function (s) {
      return function (x) {
          return function (y) {
              return function (col) {
                  return $foreign.drawStringEx(s)(x)(y)(col)(false);
              };
          };
      };
  };
  exports["drawString"] = drawString;
  exports["drawWindow"] = $foreign.drawWindow;;
 
})(PS["Engine.Graphics"] = PS["Engine.Graphics"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Engine_Graphics = PS["Engine.Graphics"];
  var Engine_Effects = PS["Engine.Effects"];
  var Engine_Color = PS["Engine.Color"];
  var Data_String = PS["Data.String"];
  var Data_Char = PS["Data.Char"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var onKeyPress = function (state) {
      return function (key) {
          return function (shift) {
              return state + 1 | 0;
          };
      };
  };
  var initialGameState = 5;
  var gameTitle = [ "      _ _____  _                      _", "     | |  __ \\| |                    | |", "   __| | |__) | |     __ _  ___ _   _| | __ _", "  / _` |  _  /| |    / _` |/ __| | | | |/ _` |", " | (_| | | \\ \\| |___| (_| | (__| |_| | | (_| |", "  \\__,_|_|  \\_\\______\\__,_|\\___|\\__,_|_|\\__,_|" ];
  var drawMenu = function (x) {
      return function (y) {
          var drawer = function (y1) {
              return function (s) {
                  return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](y1 + 1 | 0))(Engine_Graphics.drawString(s)(x)(y1)(Engine_Color.white));
              };
          };
          return Prelude["void"](Control_Monad_Eff.functorEff)(Data_Array.foldM(Control_Monad_Eff.monadEff)(drawer)(y)(gameTitle));
      };
  };
  var drawFunc = function (state) {
      return function __do() {
          Engine_Graphics.drawWindow(12)(1)(51)(9)(Engine_Color.white)(false)();
          drawMenu(14)(2)();
          Engine_Graphics.drawWindow(40 - 16)(12)(30)(9)(Engine_Color.white)(false)();
          return Engine_Graphics.drawString(Data_String.fromChar(Data_Char.fromCharCode(1)) + " Start new game")(40 - 14)(14)(Engine_Color.white)();
      };
  };
  exports["gameTitle"] = gameTitle;
  exports["drawMenu"] = drawMenu;
  exports["onKeyPress"] = onKeyPress;
  exports["drawFunc"] = drawFunc;
  exports["initialGameState"] = initialGameState;;
 
})(PS["Game"] = PS["Game"] || {});

PS["Main"].main();
